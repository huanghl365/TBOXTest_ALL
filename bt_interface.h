/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.qt.yeedon.bt.xml -p bt_interface
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BT_INTERFACE_H
#define BT_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.qt.yeedon.bt
 */
class ComQtYeedonBtInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.qt.yeedon.bt"; }

public:
    ComQtYeedonBtInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComQtYeedonBtInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> echo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("echo"), argumentList);
    }

    inline QDBusPendingReply<bool> request_AvrcpCommand(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("request_AvrcpCommand"), argumentList);
    }

    inline QDBusPendingReply<> request_CloseDevice()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_CloseDevice"), argumentList);
    }

    inline QDBusPendingReply<bool> request_DeletePairedDevice(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address);
        return asyncCallWithArgumentList(QStringLiteral("request_DeletePairedDevice"), argumentList);
    }

    inline QDBusPendingReply<bool> request_GetAutoConnectStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_GetAutoConnectStatus"), argumentList);
    }

    inline QDBusPendingReply<int> request_GetAutoReactionStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_GetAutoReactionStatus"), argumentList);
    }

    inline QDBusPendingReply<bool> request_GetConnectStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_GetConnectStatus"), argumentList);
    }

    inline QDBusPendingReply<> request_HfpCommand(int type, const QString &Number)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(Number);
        return asyncCallWithArgumentList(QStringLiteral("request_HfpCommand"), argumentList);
    }

    inline QDBusPendingReply<> request_OpenDevice()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_OpenDevice"), argumentList);
    }

    inline QDBusPendingReply<> request_PairingDevice(const QString &address, bool status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address) << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("request_PairingDevice"), argumentList);
    }

    inline QDBusPendingReply<> request_PairingRespond(int status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("request_PairingRespond"), argumentList);
    }

    inline QDBusPendingReply<bool> request_PbapDownLoad(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("request_PbapDownLoad"), argumentList);
    }

    inline QDBusPendingReply<> request_ScanDevice(bool status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("request_ScanDevice"), argumentList);
    }

    inline QDBusPendingReply<> request_ScanGatt(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("request_ScanGatt"), argumentList);
    }

    inline QDBusPendingReply<int> request_SendDataToIap(const QByteArray &info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info);
        return asyncCallWithArgumentList(QStringLiteral("request_SendDataToIap"), argumentList);
    }

    inline QDBusPendingReply<int> request_SendDataToSpp(const QByteArray &info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info);
        return asyncCallWithArgumentList(QStringLiteral("request_SendDataToSpp"), argumentList);
    }

    inline QDBusPendingReply<bool> request_SetA2dpMute(int action)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(action);
        return asyncCallWithArgumentList(QStringLiteral("request_SetA2dpMute"), argumentList);
    }

    inline QDBusPendingReply<bool> request_SetAutoConnectStatus(bool status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("request_SetAutoConnectStatus"), argumentList);
    }

    inline QDBusPendingReply<bool> request_SetAutoReactionStatus(int type, int sec)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(sec);
        return asyncCallWithArgumentList(QStringLiteral("request_SetAutoReactionStatus"), argumentList);
    }

    inline QDBusPendingReply<bool> request_SetLocalDeviceName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("request_SetLocalDeviceName"), argumentList);
    }

    inline QDBusPendingReply<bool> request_SetMicMute(const QString &address, int action)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address) << QVariant::fromValue(action);
        return asyncCallWithArgumentList(QStringLiteral("request_SetMicMute"), argumentList);
    }

    inline QDBusPendingReply<bool> request_connectProfile()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("request_connectProfile"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void sigBleDevName(const QString &name);
    void sigConnectStatus(int type);
    void sigContactsInfo(const QString &name, const QString &number, int type);
    void sigDownloadStatus(int type, int status);
    void sigHfpCallStatus(int type, const QString &number);
    void sigHfpCommandOK(int type, bool status);
    void sigIapData(const QByteArray &info);
    void sigInquiryInfo(const QString &addr, const QString &name, const QString &cod, const QString &rssi);
    void sigInquiryStatus(bool status);
    void sigLocalDeviceInfo(const QString &addr, const QString &name);
    void sigMusicInfo(const QString &title, const QString &artist, const QString &album);
    void sigMusicPlayStatus(bool status);
    void sigMusicSource();
    void sigPairedInfo(const QString &addr, const QString &name);
    void sigRecordsInfo(const QString &name, const QString &number, const QString &time, int type);
    void sigRemoteConnectStatus(const QString &addr, bool status);
    void sigRemotePairingRequest();
    void sigSppData(const QByteArray &info);
    void sigSwitchStatus(bool status);
};

namespace com {
  namespace qt {
    namespace yeedon {
      typedef ::ComQtYeedonBtInterface bt;
    }
  }
}
#endif
